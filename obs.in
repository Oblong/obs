#!/bin/sh
set -e

usage() {
    # shellcheck disable=SC2154
    cat <<_EOF_
Tool for querying system or downloading / installing / serving packages on Linux/mac/windows
Usage: obs [-v] verb [args]

Options:
-v                          - verbose
--version                   - show obs version

Commands related to tarball packages (commonly used on Mac):
obs list                    - list tarball packages available to install on this system
obs install pkg ...         - install tarball packages
obs download pkg ...        - download but do not unpack tarball packages
obs upload project X Y Z foo.tar.gz ... - upload tarball for $_os (.tar.gz or .tar.bz2; .tgz forbidden; multiple ok)

Example - install webthing and its dependencies:
  obs list | grep yobuild
  obs install yobuild11 oblong-yobuild11-cef2704
  obs list | egrep 'g-speak|webthing|greenhouse|staging' | grep 3.28
  obs install g-speak3.28 oblong-greenhouse-gs3.28x oblong-webthing-cef2704-gs3.28x staging3.28
Hint: it's often easier to do 'bau install-deps' (which uses obs install
internally), that way you don't need to hunt down missing dependencies.

Miscelaneous commands:
obs detect-ncores           - get number of CPU cores this computer has
obs detect-toolchain        - find the C++ compiler (windows only)
obs detect-os               - get our os type/version identifier for the current os
obs get-artifact-subdir     - show where upload would archive results
obs get-cef-version         - show version of cef the current project expects
obs get-changenum-git       - get number of changes since last heavyweight tag on current project
obs get-gspeak-version      - show version of g-speak the current project expects
obs get-major-version-git   - get major version number of current project from heavyweight git tags
obs get-minor-version-git   - get minor version number of current project from heavyweight git tags
obs get-version-git         - get version number of current project from heavyweight git tags
obs get-gspeak-home         - show path to g-speak this project builds against currently
obs get-yobuild-home [GSH]  - show path to yobuild this project [or given G_SPEAK_HOME] builds against
obs get-yoversion [GSH]     - show major version of yobuild this project [or given G_SPEAK_HOME] builds against
obs get-prefix              - show where this project will be installed
obs intuit-buildtype        - get whether this project artifacts will be dev or rel
obs is-try                  - exit status 0 if this is a try build
obs yovo2cefversion VERSION - look up which version of cef the given version of g-speak (well, webthing) depends on
obs yovo2yoversion VERSION  - look up which version of yobuild the given version of g-speak depends on

Obscure internal commands related to Debian packages (for trickledown builds):
obs apt-key-gen             - generate a fake gpg signing key in \$ob_repotop
obs apt-key-rm              - remove a fake gpg signing key
obs apt-server-add h k d... - tell apt to add access to server h with pubkeyfile k and repos d ...
obs apt-server-rm h         - tell apt to remove access to server h
obs apt-server-init X K D...- create local apt repo at \$ob_repotop/X with pubkeyfile K for distro codenames D...
obs apt-pkg-gen p v s       - create dummy deb package p with version v claiming to be in section s
obs apt-pkg-add X D pkg...  - add given .deb packages to distro D in local apt repo at \$ob_repotop/X
obs apt-pkg-rm X D pkg...   - remove given packages from distro D in local apt repo at \$ob_repotop/X
obs sudo cmd ...            - run cmd as root with local repo visible
obs run cmd ...             - run cmd with local repo visible
obs purge-build             - delete current 'build' directory and kill old jobs

Even more obscure internal commands:
obs deps-filter-log         - filter apt log into list of dependencies
obs deps-clear              - clear current list of dependencies
obs deps-append             - add to current list of dependencies
obs deps-list               - show current list of dependencies
obs describe                - show git revision etc. for debugging.
obs set-buildname X         - saves buildname (e.g. yovo-master-osx1014/37) for use during upload
_EOF_
}

# Yovo, greenhouse, and possibly other projects have a script baugen.sh
# that installs a new version of obs if `obs --version` outputs a number
# that is too low for its taste.
# Must be integer
OBS_VERSIONOID=@VERSIONOID@

# On Windows, this may be invoked without /bin or /usr/bin on PATH, causing
# obs to fail when it runs e.g. uname.
# Not sure of best way to test for this, so just see if those dirs are in PATH,
# and append /bin to PATH if they aren't.
case "$PATH" in
/bin:*|*:/bin:*|*:/bin) ;;
/usr/bin:*|*:/usr/bin:*|*:/usr/bin) ;;
*) PATH="${PATH}:/bin";;
esac

# If obs is properly installed, obs_funcs.sh will be on PATH
# but during development, we want to read obs_funcs.sh from same directory as obs, overriding installed one
SRCFILE="$(readlink "$0" 2>/dev/null || echo "$0")"
case "$SRCFILE" in
../obs) . ../obs_funcs.sh;;
./obs|./obs.in) . ./obs_funcs.sh;;
*)     . obs_funcs.sh;;
esac

# Functions not worth putting in obs_funcs.sh for now

# Show tags and current description relative to them.
# For buildbot diagnostics.
obs_describe() {
    git tag -l
    git describe --tags
}

# Running without any arguments may be a typo in a script, so show usage and abort.
case "$1" in
"")    usage; exit 1;;
esac

# obs may have trouble with non-english locales
case "$LANG" in
""|C|C.*|en*) ;;
*) export LANG=C ;;
esac

# Handle options
while true
do
    cmd="$1"
    shift
    case "$cmd" in
    -v)        set -x;;
    --version) echo "obs versionoid $OBS_VERSIONOID"; exit 0;;
    -h|--help) usage; exit 0;;
    -*)        usage; exit 1;;
    *)         break;;
    esac
done

# Handle commands, allow - as synonym for _ in command names
cmd="$(printf %s "$cmd" | tr - _)"

case "$cmd" in
detect_ncores)         bs_detect_ncores;;
detect_toolchain)      bs_detect_toolchain;;
detect_os)             # shellcheck disable=SC2154
                       echo "$_os" ;; # bs_detect_os already called in ". obs_funcs.sh"
get_artifact_subdir)   bs_get_artifact_subdir;;
set_artifact_subdir)   bs_set_artifact_subdir "$1";;
get_cef_version)       bs_get_cef_version;;
get_changenum_git)     bs_get_changenum_git;;
get_gspeak_home)       bs_get_gspeak_home;;
get_gspeak_version)    bs_get_gspeak_version;;
get_major_version_git) bs_get_major_version_git;;
get_minor_version_git) bs_get_minor_version_git;;
get_pkgname)           bs_get_pkgname;;
get_prefix)            bs_get_prefix;;
get_version_git)       bs_get_version_git;;
get_yobuild_home)      bs_get_yobuild_home "$1";;
get_yoversion)         bs_get_yoversion "$1";;
install)               bs_install "$@";;
download)              bs_download "$@";;
upload)                proj=$1; shift; bs_upload2 "$proj" "$_os" "$@";;
pkg_list|list)         bs_pkg_list;;
purge_build)           bs_purge_build;;
yovo2cefversion)       bs_yovo2cefversion "$@";;
yovo2yoversion)        bs_yovo2yoversion "$@";;
apt_key_gen)           bs_apt_key_gen;;
apt_key_rm)            bs_apt_key_rm;;
apt_server_add)        bs_apt_server_add "$@";;
apt_server_rm)         bs_apt_server_rm "$@";;
apt_server_init)       bs_apt_server_init "$@";;
apt_pkg_gen)           bs_apt_pkg_gen "$@";;
apt_pkg_add)           bs_apt_pkg_add "$@";;
apt_pkg_rm)            bs_apt_pkg_rm "$@";;
apt_pkg_get_transitive) bs_apt_pkg_get_transitive "$@";;
sudo)                  sudo APT_CONFIG="$APT_CONFIG" GNUPGHOME="$GNUPGHOME" "$@";;
run)                   "$@";;
deps_filter_log)       bs_deps_filter_log;;
deps_append_log)       bs_deps_append_log;;
deps_append)           bs_deps_append;;
deps_list)             bs_deps_list;;
deps_clear)            bs_deps_clear;;
intuit_buildtype)      bs_intuit_buildtype;;
is_try)                bs_is_try_build ;;
describe)              obs_describe;;
*)                     echo "Unknown cmd $cmd"; usage; exit 1;;
esac

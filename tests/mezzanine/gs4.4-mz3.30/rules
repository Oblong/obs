#!/usr/bin/make -f
# -*- makefile -*-

#--- Begin lines edited by ob-set-defaults ---
# ob-set-defaults is the tool to use to change G_SPEAK_HOME, YOBUILD,
# PREFIX, and package names suffix etc. properly, such that
# 'debuild -b' would produce a valid debian package.
# See "ob-set-defaults --help" (and, if this project has it, ci/ob-set-defaults.conf).

# PREFIX is where this project should be installed.
# By default, it's the same as G_SPEAK_HOME.
# To change it independently, do e.g.
#   ob-set-defaults --g-speak 3.28 --prefix /opt/a-better-place
# or set PREFIX in ci/ob-set-defaults.conf.
PREFIX=/usr

# G_SPEAK_HOME is the directory where the g-speak SDK we link against is found.
# To change the project to link against e.g. g-speak 3.28, do e.g.
#   ob-set-defaults --g-speak 3.28
G_SPEAK_HOME=/opt/oblong/g-speak4.4

# YOBUILD is where updated system-y libraries for this version of g-speak live.
# ob-set-defaults sets this based on the g-speak version.
YOBUILD=/opt/oblong/deps-64-12

# Cmake options passed to ob-set-defaults (careful, quoting is treacherous here)
CMAKE_GENERATOR=Ninja
EXTRA_CMAKE_OPTIONS=

# dh_strip needs a little help to know how to name the debug symbol package.
# Dima's nifty debug package thingy
# find all the ...-dbg packages, and use dh_strip to separate out their debug symbols into the debug package.
# Two passes. First does all the -dbg, second does everything else
STRIP_INTO_DBG = perl -e '    \
  $$/ = undef;                \
  @p = <> =~ /^Package:\s*(\S+)/mg;  \
  $$h{$$_} = 1 for(@p);       \
  for ( @p )                  \
  {                           \
    if( /(.*)-dbg/ )          \
    {                         \
      system( "dh_strip -p $$1 --dbg-package=$$_" ); \
      delete $$h{$$1};        \
      delete $$h{$$_};        \
    }                         \
  }                           \
  for ( @p )                  \
  {                           \
    if( $$h{$$_} )            \
    {                         \
      system( "dh_strip -p $$_" ); \
    }                         \
  }'
override_dh_strip:
	$(STRIP_INTO_DBG) debian/control

# Enable lines like the following if this package installs services
## This package installs a service named 'oblong-{{project_name}}'
#
#override_dh_systemd_enable:
#	dh_systemd_enable --name oblong-{{project_name}}
#
#override_dh_systemd_start:
#	dh_systemd_start --no-start --name oblong-{{project_name}}
#
#override_dh_installinit:
#	dh_installinit --name oblong-{{project_name}}

#--- End lines edited by ob-set-defaults

# Remainder of file should be completely generic to any
# project using cmake, and not contain any project-dependent
# or version-dependent info at all (except possibly the PATH
# and EXTRA_LD_LIBRARY_PATH lines, which may need to mention
# $PREFIX/bin or the like for some future project).

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

# Enable debhelper systemd service installer
# WITH_SYSTEMD := --with=systemd
# Leave it disabled for now, see https://bugs.oblong.com/show_bug.cgi?id=19112
WITH_SYSTEMD :=

# BTMP is where to put the build tree; use dh's default
SRC=$(shell pwd)
DEB_BUILD_GNU_TYPE := $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)
BTMP=$(SRC)/obj-$(DEB_BUILD_GNU_TYPE)

# Make dh_shlibdeps happy
# Fun fact: this makefile invokes itself recursively, so appending here
# means appending twice... and on ubuntu 15.10, leads
# to mysterious illegal instruction build failures.
# So let's append at runtime in the rules that need it.
EXTRA_LD_LIBRARY_PATH=$(G_SPEAK_HOME)/lib:$(YOBUILD)/lib

# Make sure we can find cmake even if it's in yobuild
PATH:=$(YOBUILD)/bin:$(PATH)
export PATH

# The central, all-powerful debhelper make rule (Thanks, Joey!)
%:
	dh $@ --parallel --buildsystem=cmake $(WITH_SYSTEMD)

override_dh_auto_configure:
	dh_auto_configure -- -DCMAKE_INSTALL_PREFIX=$(PREFIX) -DCMAKE_GENERATOR="$(CMAKE_GENERATOR)" $(EXTRA_CMAKE_OPTIONS)

# dh doesn't quite support other cmake generators than the default,
# so use cmake --build.  Have to jump through a hoop or two to
# pass debuild's -j4 parameter through!
ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
NUMJOBS = $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
BUILDFLAGS := -j$(NUMJOBS)
else
BUILDFLAGS :=
endif
override_dh_auto_build:
	cd $(BTMP); cmake --build . -- $(BUILDFLAGS)

# Likewise, jump through a hoop to get 'dh install' to use cmake --build.
DESTDIR=$(CURDIR)/debian/tmp
override_dh_auto_install:
	cd $(BTMP); DESTDIR=$(DESTDIR) cmake --build . --target install

# Likewise, jump through a hoop to get 'dh check' to use ctest -V
# and also obey DEB_BUILD_OPTIONS=nocheck.
override_dh_auto_test:
	if ! echo "$$DEB_BUILD_OPTIONS" | grep nocheck; then . ci/gtest_filter.sh; cd $(BTMP); env LD_LIBRARY_PATH=$${LD_LIBRARY_PATH}:$(EXTRA_LD_LIBRARY_PATH) ctest -V; fi

# Tell shlibdeps where our shared libraries are so it doesn't freak.
# KLUDGE Use --ignore-missing-info to avoid warnings from libGL.so
override_dh_shlibdeps:
	env LD_LIBRARY_PATH=$${LD_LIBRARY_PATH}:$(EXTRA_LD_LIBRARY_PATH) \
	dh_shlibdeps -- --ignore-missing-info

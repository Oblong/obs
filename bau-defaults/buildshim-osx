# Default buildshim for building a generic project on Mac OS inside Oblong
# Before first build:
#   sh baugen.sh
# To build:
#   bau all
# To get help on bau:
#   bau --help
# To get help on this project's bau options:
#   bau help
#
# The default buildshim for $_os is $PATH/bau-defaults/buildshim-$_os
# Projects may override the whole buildshim by providing file ci/buildshim[.$_os]
# or override individual steps by providing file ci/do-$stepname[.$_os].
# Overridden steps can access the variables and functions defined by the default buildshim.

do_help() {
  cat <<_EOF_
$_os buildshim for $(bs_get_projname)

Build steps:
  patch [options]- set options and do any always-needed source tree tweaks
  install-deps
  clean          - do this first to wipe out old build
  configure
  compile
  check
  package
  lclone         - uberbau: clone --lprojects, init local repo
  lbuild         - uberbau: build --lprojects against local repo
  compile-extra  - install packages, then build installed examples (if any)
  upload [option]- upload built packages (set --no-publish for tries)
  uninstall-deps - uninstall packages installed during build (on mac, does rm -rf /opt/oblong)

Options:
  --asan         - alias for -DASAN=on
  --cef branch   - which version of cef to build against (sticky)
  --coverage     - alias for -DCOVERAGE=on
  --debug        - alias for -DCMAKE_BUILD_TYPE=Debug
  --greenhouse   - alias for -DGREENHOUSE=on -DUSE_STATIC_G_SPEAK=on -DCMAKE_INSTALL_PREFIX=/opt/oblong/greenhouse
  --g-speak X.Y  - which version of g-speak to build against (sticky)
  --mezz X.Y     - which version of mezzanine to build against (sticky)
  --make         - generate Makefiles and build with make
  --ninja        - generate build.ninja and build with ninja
  --no-extra     - skip compile_extra step
  --no-publish   - don't publish artifact in repository
  --no-tests     - alias for -DBUILD_TESTS=off
  --prefix DIR   - install to DIR
  --tsan         - alias for -DTSAN=on
  --xcode        - generate XCode project and build with XCode
  -Dfoo=bar      - passed through to cmake

Localbuild options (can use , or space as separators):
  --lmirror "P,Q"   - Preload built packages P and Q from upstream apt/obs repo during lclone
  --lprojects "X,Y" - the projects lclone and lbuild will operate on
_EOF_
}

# Clear options to default
# Call from earliest step (e.g. 'patch') before parse_opts
clear_opts() {
  rm -f bs-*.dat
}

# Usage: set_val val file
# Appends val to file if not already present
set_val() {
  if ! test -f "$2" || ! grep -q -e "$1" < "$2"
  then
    printf %s "$1" >> "$2"
  fi
}

# Parse options
# Only parse options in steps that need them.
# Store results in files so the values are available to later steps.
# Many of these are just short aliases for cmake options.
parse_opts() {
  while test "$1"
  do
    case "$1" in
    --asan|--coverage|--debug|--greenhouse|--make|--ninja|--no-tests|--tsan|--xcode|-D*=*)
        set_val " $1" bs-options.dat
        ;;
    --cef)
        shift
        set_val " --cef $1" bs-options.dat
        ;;
    --env)
        shift
        echo "Setting environment variable $1 (e.g. ASAN_OPTIONS)"
        export "$1"
        ;;
    --g-speak)
        shift
        set_val " --g-speak $1" bs-options.dat
        ;;
    --lmirror)
        shift
        # Allow comma or space separators.  Assumes no spaces in package names.
        printf %s "$1" | tr ',' ' ' > bs-lmirror.dat
        ;;
    --lprojects)
        shift
        # Allow comma or space separators.  Assumes no spaces in project names.
        printf %s "$1" | tr ',' ' ' > bs-lprojects.dat
        ;;
    --mezz)
        shift
        set_val " --mezz $1" bs-options.dat
        ;;
    --no-extra)
        opt_no_extra=true  # only important with 'bau all', so no need to persist
        ;;
    --no-publish)
        # See bs_upload() in bs_funcs.sh
        export BS_NO_PUBLISH=1
        ;;
    --prefix)
        shift
        set_val " --prefix $1" bs-options.dat
        ;;
    *)
        bs_abort "$BAU_SHIM: Unknown argument $1"
        ;;
    esac
    shift
  done

  case "$BAU_VERBOSE" in
  1) verbose=-v;;
  esac
}

do_patch() {
  bs_kludge_init_submodule_on_try_build

  if test -f .gitattributes && grep lfs .gitattributes > /dev/null
  then
    bs_kludge_init_git_lfs
  fi

  # Clear and accept options in do_patch, as that's the first step
  # (well, do_uninstall and do_clean could come before, doesn't matter)
  clear_opts
  parse_opts "$@"

  local gspeak
  if test -f bs-options.dat
  then
    ob-set-defaults $verbose $(cat bs-options.dat)
  elif gspeak=$(bs_get_gspeak_version 2>/dev/null) && test "$gspeak" != ""
  then
    # No options given.  We want 'bau all' without options to clear
    # old options such as --asan, but ob-set-defaults won't do that
    # without at least one option... and if it's defering to a
    # classic local set-gspeak.sh, the only option that will always
    # work is --g-speak, which clears sticky options.  Bleah.
    # Get value of sticky options and use them again.

    local opt_greenhouse
    if bs_is_greenhouse
    then
      opt_greenhouse="--greenhouse"
    fi
    local opt_cef=$(bs_get_cef_version | sed 's/cef//')
    case "$opt_cef" in
    "") ;;
    *) opt_cef="--cef $opt_cef";;
    esac
    ob-set-defaults $verbose --g-speak $gspeak $opt_greenhouse $opt_cef
  else
    :
    # can't get old g-speak version, probably no options to clear
    # (e.g. no debian/rules file to save them in).  Assume all is well.
  fi
}


do_configure() {
  # cmake now finds FindOblong.cmake via PATH
  local G_SPEAK_HOME="$(bs_get_gspeak_home)"
  local PREFIX=$(bs_get_prefix)
  PATH="${G_SPEAK_HOME}/bin:$PATH"
  YOBUILDHOME="$(bs_get_yobuild_home)"

  # Note: this is an incremental configure.  Do 'bau clean' if you want clean start.
  mkdir -p "$btmp"
  cd "$btmp"
  if test -f ../meson.build
  then
    # FIXME: include archlib?
    export PKG_CONFIG_PATH=${G_SPEAK_HOME}/lib/pkgconfig:${YOBUILDHOME}/lib/pkgconfig
    if test "$PREFIX" != "$G_SPEAK_HOME" && test "$PREFIX" != "$YOBUILDHOME"
    then
        PKG_CONFIG_PATH="${PKG_CONFIG_PATH}:${PREFIX}/lib/pkgconfig"
    fi
    # meson can't find boost without a hint.  Believe it or not, boost doesn't use pkgconfig.
    export BOOST_ROOT=${YOBUILDHOME}
    # FIXME: handle more options
    meson setup --prefix "$(bs_get_prefix)" .. .
  elif test -f ../CMakeLists.txt
  then
    cmake \
      -G"$(bs_get_cmake_generator_with_default)" \
      $(bs_get_cmake_options) \
      -DCMAKE_INSTALL_PREFIX="$(bs_get_prefix)" \
      ..
  else
    bs_abort "configure: neither CMakeLists.txt nor meson.build found"
  fi
}

do_compile() {
  cd "$btmp"
  # bau (well, bs_pkg_init in bs_funcs.sh) sets $ncores to 4 or whatever
  if test -f ../meson.build
  then
    ninja -v
  elif test -f ../CMakeLists.txt
  then
    case "$(bs_get_cmake_generator_with_default)" in
    Xcode) parallel=IDEBuildOperationMaxNumberOfConcurrentCompileTasks=$ncores;;
    *) parallel=-j$ncores;;
    esac
    cmake --build . -- $parallel
  else
    bs_abort "compile: neither CMakeLists.txt nor meson.build found"
  fi
}

do_check() {
  bs_test_env_setup
  cd "$btmp"
  if test -f ../meson.build
  then
    if ! ninja test
    then
      bs_abort "Test failed"
    fi
  elif test -f ../CMakeLists.txt
  then
    if ! ctest -V $BS_CTEST_EXTRA
    then
      bs_abort "Test failed"
    fi
  else
    bs_abort "check: neither CMakeLists.txt nor meson.build found"
  fi
  cd ..
  bs_test_env_teardown
}

do_package() {
  local pkgname
  pkgname=$(bs_get_pkgname)

  cd "$btmp"
  rm -rf ../pkgtmp || true
  mkdir ../pkgtmp
  DESTDIR=$(cd ../pkgtmp; pwd)
  if test -f ../meson.build
  then
    DESTDIR=$DESTDIR ninja -v install
  elif test -f ../CMakeLists.txt
  then
    DESTDIR=$DESTDIR cmake --build . --target install
  else
    bs_abort "package: neither CMakeLists.txt nor meson.build found"
  fi
  cd ../pkgtmp
  tarball=../"$pkgname-$version-$version_patchnum".tar.gz
  # Alas, fakeroot sh -c "cmd1; cmd2" is not reliable, so make a shell script.
  script=/tmp/"$pkgname".maketar.$$.sh
  echo "chown -R root:wheel *; tar -czvf $tarball *" > "$script"
  fakeroot sh "$script"
  rm "$script"
  cd ..
  rm -rf pkgtmp

}

do_lclone() {
  parse_opts "$@"

  local projname=$(bs_get_projname)
  local pkgname=$(bs_get_pkgname)
  local mirror="$(cat bs-lmirror.dat 2>/dev/null || true)"
  local bsoptions="$(cat bs-options.dat 2>/dev/null || true)"
  local projects
  if ! projects="$(cat bs-lprojects.dat 2>/dev/null)"
  then
    bs_warn "lclone: --lprojects not given, skipping"
    return 0
  fi
  local gspeak
  if ! gspeak=$(bs_get_gspeak_version)
  then
    # fixme: default to something sensible?
    bs_abort "lclone: --g-speak unknown"
  fi

  # Create local supertree to hold this project and the downstream $projects
  export LB_SRCTOP="$origdir-supertree.tmp"
  mkdir -p "$LB_SRCTOP"
  cd "$LB_SRCTOP"

  # Get access to the already-checked out tree for this project
  if ! test -L "$projname"
  then
    if test -d ../"$projname"
    then
      # normal case
      ln -s ../"$projname" "$projname"
    else
      # buildbot
      ln -s ../build "$projname"
    fi
  fi

  uberbau $verbose install_deps
  uberbau $verbose set-gspeak "$gspeak"
  # Use the same flags (--greenhouse, --asan, etc.) for all projects we build.  Could work :-)
  case "$bsoptions" in
  "") ;;
  *)  uberbau $verbose set-bsopts $bsoptions;;
  esac

  uberbau $verbose clone $projects

  # Kludge: there are two ways to mirror packages from upstream:
  #
  # 1) 'uberbau nuke pkg...'
  # This mirrors individual packages.
  # We use this to handle --lmirror.

  uberbau $verbose nuke "$mirror"

  # 2) 'uberbau mirror project...'
  # This pulls in all the packages from a given source project,
  # and has a little magic to pick the right yobuild or g-speak version.
  # We use this for nobuild, yobuild, and gspeak automatically.
  # We should consider exposing this like we do --lmirror.
  # The logic here is very fragile.  Using ob-build-deps at least
  # protects us from being fooled by comments.

  mirrorgroups="minimal"
  if echo $pkgname | grep oblong-staging
  then
     # kludge: don't have time to fix autodetect, so cheat
     mirrorgroups="nobuild yobuild yovo"
  elif (cd "$origdir"; ob-build-deps) | grep -qE 'g-speak|oblong-noodoo|oblong-loam|oblong-plasma|oblong-gs'
  then
     # gspeak includes yovo and staging, with -gh if --greenhouse in BS_OPTS
     mirrorgroups="nobuild yobuild gspeak"
  elif (cd "$origdir"; ob-build-deps) | grep -v cmake | grep -qE 'oblong-yobuild'
  then
     # FIXME: it's likely this pulls in yobuild sometimes when it's not needed
     mirrorgroups="nobuild yobuild"
  fi
  uberbau $verbose mirror $mirrorgroups
}

do_lbuild() {
  parse_opts "$@"

  local projects
  if ! projects=$(cat bs-lprojects.dat 2>/dev/null)
  then
    bs_warn "lbuild: --projects not given, skipping"
    return 0
  fi
  local pkgname
  pkgname=$(bs_get_pkgname)

  export LB_SRCTOP="$origdir-supertree.tmp"

  # Upload what we just built to the local repo
  local f="$pkgname-$version-$version_patchnum".tar.gz
  uberbau $verbose upload "$pkgname" "$_os" "$version_major.$version_minor" "$version_micro" "$version_patchnum" "$f"

  # Build the downstream projects!
  cd "$LB_SRCTOP"
  uberbau $verbose build $projects
}

do_upload_tarball() {
  local pkgname
  pkgname=$(bs_get_pkgname)
  local f="$pkgname-$version-$version_patchnum".tar.gz
  local d
  for d in . .. btmp btmp/_CPack_Packages no-tar-found
  do
     if test -f "$d/$f"
     then
        f="$d/$f"
        break
     fi
  done

  if test -f "$f"
  then
    bs_upload2 "$pkgname" "$_os" "$version_major.$version_minor" "$version_micro" "$version_patchnum" "$f"
    rm "$f"
  else
    bs_abort "No tarball found to upload"
  fi
}

do_upload() {
  parse_opts "$@"

  if test -f coverage-report.tgz
  then
    # Don't push to bau, but do push to manually downloadable artifact area.
    BS_NO_PUBLISH=true do_upload_tarball

    # Set BS_NO_CLEAN_UPLOAD to avoid nuking the package we just uploaded.
    BS_NO_CLEAN_UPLOAD=1 BS_UNPACK_IT=YESPLZ bs_upload fakekind non-free coverage-report.tgz
    # Freaky - have to unset that transient variable?!  I guess because bs_upload is a shell fn.
    unset BS_UNPACK_IT
    BS_NO_CLEAN_UPLOAD=1 bs_upload fakekind non-free coverage-source.tgz
  else
    do_upload_tarball
  fi
}

do_clean() {
  # Remove traces of old builds, if any
  local LB_SRCTOP="$origdir-supertree.tmp"
  rm -rf \
     "$btmp" \
     "$LB_SRCTOP" \
     ./*.tmp \
     #
}

do_uninstall_deps() {
  sudo rm -rf /opt/oblong
}

# Reduce console spew of 'bau all' by telling bau which of the canonical
# build steps are implemented
# (buildbot runs fixed list, e.g. uninstall_deps patch install_deps
# configure compile check package compile_extra upload clean uninstall_deps)
# Individual projects can override this with a file ci/do-list or ci/do-list.$_os
do_list() {
  echo help clean patch install_deps configure compile check package lclone lbuild compile_extra upload uninstall_deps
}

#--- Helper functions
# These get the bs prefix because they might be called from an
# overridden buildshim fragment ci/do-$step or ci/do-$step.$_os
# and might move to obs_funcs.sh or bs_funcs.sh sometime

bs_get_cmake_options()
{
    grep '^EXTRA_CMAKE_OPTIONS=' < "$origdir"/debian/rules | sed 's/EXTRA_CMAKE_OPTIONS=//'
}

bs_get_cmake_generator()
{
    awk -F= '/^CMAKE_GENERATOR=/ { print $2 }' < "$origdir"/debian/rules | sed 's/^  *//;s/  *$//'
}

bs_get_cmake_generator_with_default()
{
    local gen=$(bs_get_cmake_generator)
    case "$gen" in
    "") gen=Ninja;;
    esac
    echo $gen
}

bs_get_prefix()
{
    awk -F= '/^PREFIX=/ { print $2 }' < "$origdir"/debian/rules | sed 's/^  *//;s/  *$//'
}

# Get the package name (for use with bs_upload)
bs_get_pkgname() {
  awk '/Source:/ {print $2};' < "$origdir"/debian/control || echo unknown-until-configure
}

# Get the git repo name without prefix (for use with uberbau clone x)
bs_get_projname() {
  case "$origdir" in
  */build)
     # Buildbot checked us out into buildername/build
     git remote -v | head -n 1 | sed 's,.*/,,;s/\.git.*//'
     ;;
  *)
     # otherwise trust that current directory is named same as project
     # FIXME: should we just always use git?
     basename "$origdir"
     ;;
  esac
}

# Return old package name suffix for things linked against this version of g-speak
# i.e. -gh3.31 for static link to g-speak 3.31 for greenhouse,
# 3.31 for normal g-speak 3.31
# Looks in source tree to detect whether greenhouse version should be used
bs_short_pkg_suffix()
{
    local gs=$1
    # If -gh appears anywhere in a non-commented line in debian/control, assume greenhouse
    if grep -q -e '^[^#]*-gh[0-9]' debian/control
    then
        printf %s "-gh$gs"
    else
        echo "$gs"
    fi
}

# Output a dummy feld protein for testing
bs_gen_feld() {
cat <<"_EOF_"
!<tag:oblong.com,2009:slaw/protein>
descrips:
- visidrome
- feld-info
ingests:
  felds:
    { main:
      { window: [0, 0, 1280, 800],
        screen: main
      }
    }
_EOF_
}

# Output a dummy screen protein for testing
bs_gen_screen() {
cat <<"_EOF_"
!<tag:oblong.com,2009:slaw/protein>
descrips:
- visidrome
- screen-info
ingests:
  screens:
    { main:
      { type: basic,
        cent: [ 0.0, 0.0, -2000.0 ],
        phys-size: [ 336.0, 210.0 ],
        norm: [ 0.0, 0.0, 1.0 ],
        over: [ 1.0, 0.0, 0.0 ],
        px-size: [ 1280, 800 ],
        px-origin: [0, 0],
        eye-dist: 2000.0,
      }
    }
_EOF_
}

# Initialize test environment
bs_test_env_setup() {
  local pkgname
  pkgname=$(bs_get_pkgname)

  # If project specifies gtest flags, obey them
  # But see https://github.com/google/googletest/issues/1262 for patch to gtest
  local flagfile
  for flagfile in "$origdir/ci/gtest-flags.$_os" "$origdir/ci/gtest-flags.$BAU_OS" "$origdir/ci/gtest-flags"
  do
    if test -f "$flagfile"
    then
       export GTEST_FLAGFILE="$flagfile"
       break
    fi
  done

  # If this project uses plasma, set up g-speak test environment
  # FIXME: yovo's test harness duplicates this, move to cmake?
  local g_speak_home
  g_speak_home=$(bs_get_gspeak_home)
  if test "$g_speak_home" != "" && test -x "$g_speak_home/bin/p-create"
  then
    # Would put them in $btmp, but have feeling that would break unix sockets max length
    test_env_dir=/tmp/$pkgname-check.$$.tmp
    rm -rf $test_env_dir

    OB_POOLS_DIR=$test_env_dir/pools
    export OB_POOLS_DIR
    mkdir -p $OB_POOLS_DIR

    OB_ETC_PATH=$test_env_dir/pools
    export OB_ETC_PATH
    mkdir -p $OB_ETC_PATH

    # Fail early if we can't create a pool
    "$g_speak_home/bin/p-create" blortyblort

    # g-speak itself only requires these two proteins.
    # App's tests can append to OB_ETC_PATH to add more.
    bs_gen_feld > $OB_ETC_PATH/feld.protein
    bs_gen_screen > $OB_ETC_PATH/screen.protein
  fi

  case "$(bs_get_cmake_options)" in
  *COVERAGE=on*)
    # Clear coverage counters
    if test -x $origdir/bld/coverage.sh
    then
      # local override, in case test directories named funny
      $origdir/bld/coverage.sh start
    else
      ob-coverage.sh begin
    fi;;
  esac

  # Disable screen blanking / sleeping, which causes test hangs on osx1013
  if ! ps augxw | grep -v grep | grep caffeinate
  then
    # Default seems to be 5 seconds, so we have to specify a duration.
    # One hour ought to be enough, right?
    caffeinate -u -d -t 3600 &
  fi
}

bs_test_env_teardown() {
  # Kill background job, else this script hangs
  killall -HUP caffeinate || true

  # delete the directory bs_test_env_setup created, if any
  if test "$test_env_dir" != ""
  then
    rm -rf $test_env_dir
  fi

  case "$(bs_get_cmake_options)" in
  *COVERAGE=on*)
    # Generate a coverage report
    if test -x $origdir/bld/coverage.sh
    then
      # local override, in case test directories are named funny
      $origdir/bld/coverage.sh end
    else
      ob-coverage.sh end
    fi
    # Archive it for uploading
    tar -czf coverage-report.tgz coverage-report

    # Save source and .gcno files from compile, in case we need to run gcov later.
    # Save .gcda files, too, though they're not as important.
    tar -czf coverage-source.tgz \
      $(find . \
               -name .git       -prune \
            -o -name "$btmp"    -prune \
            -o -name debian     -prune \
            -o -name '*.[Cchm]' -print \
            -o -name '*.cpp'    -print \
            -o -name '*.mm'     -print \
            -o -name '*.gcno'   -print \
            -o -name '*.gcda'   -print \
            | grep -v lcov)
    ;;
  esac
}

#--- Global variables used by above functions ---
# note: bau calls bs_funcs.sh, which also sets a number of globals (e.g. $version*)

# Note: these are currently immutable, so don't set anything that
# might change during a 'bau all' run (e.g. patch --g-speak X.Y
# may change gspeak and yoversion, so nothing containing those can
# be set here... including pkgname)

#--- Shell variables
# Use lowercase names for unexported variables, please

btmp=btmp
opt_no_extra=false
origdir="$(pwd)"

#--- Environment variables
# Use uppercase names for exported variables, please

# Pick up a newer cmake (say, from oblong-yobuild11-cmake)
# FIXME: this'll be wrong if yoversion changes during 'bau all', e.g. from 'ob-set-defaults --g-speak 4.2'
if YOBUILDHOME="$(bs_get_yobuild_home)"
then
    PATH="$YOBUILDHOME/bin:$PATH"
fi

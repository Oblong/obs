# -*- python -*-
# ex: set filetype=python:

# Derived from https://github.com/buildbot/buildbot/blob/master/master/docs/examples/gitlab.cfg

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.
#
# Are all your projects built the same way?
# Do you yearn for a way to do simple static configuration?
# If so, try writing a function!
#
# Here's an example that
# - uses a function to make adding new projects easy
# - provides a regular builder and a smoke test builder per project
# - stores secrets in separate files
# - integrates with GitLab, and does smoke builds on merge requests
# - demonstrates access control using GitLab authentication
# - uses VersionFilter to do simple worker filtering
#   (requires pip install anybox.buildbox.capability)
#
# To use this example with your own local instance of GitLab:
#
# 0. Set up local mirrors of the gnu hello and time projects, e.g.
#  for proj in hello time
#  do
#    git clone --mirror git@gitlab.com:GNU/$proj.git
#    cd $proj
#    git push --mirror git@gitlab.oblong.com:build/gnu-$proj.git
#    cd ..
#  done
#
# 1. Edit this file to replace oblong.com with your own domain,
#  and adjust worker name and password in c['workers'].
#
# 2. Create secrets.dir next to master.cfg:
#  mkdir secrets.dir
#
# 3. Tell GitLab to use webhooks to request builds.
#  Pick a random password for our webhook and save it as a secret, e.g.
#    echo "<string-webhook-token>" > secrets.dir/my-webhook-token
#    chmod 600 secrets.dir/*
#  (where <value> is just a placeholder for a value).
#  For each project to build, create a webhook in the GitLab UI at
#    project / Settings / Integrations / Add Webhook
#  with a URL of e.g.
#    http://buildhost5.oblong.com:8010/change_hook/gitlab
#  the secret chosen above,
#  and with push and merge request triggers checked.
#
#  Then start the build master and worker.
#  Test the webhook by visiting
#    project / Settings / Integrations / Webhooks
#  and clicking 'test' on your webhook.
#  If something goes wrong, GitLab will show a red banner with the reason.
#  GitLab merge requests should now trigger buildbot builds.
#
# 4. Tell buildbot to report build status to GitLab.
#  Uncomment sections below marked
#    "CONFIGME: uncomment for gitlab status reporting"
#  Create a GitLab access token (so buildbot can send status to GitLab).
#  Pick a display name for your buildbot and save it as a secret, e.g.
#    echo "<string-buildbot-name>" > secrets.dir/my-buildbot-name
#    chmod 600 secrets.dir/*
#  Create an access token in the GitLab UI at
#    "User Settings / Access Tokens / Add a personal access token"
#  using that display name as the context, and save it as a secret, e.g.
#    echo "<string-gitlab-token>" > secrets.dir/my-gitlab-token
#    chmod 600 secrets.dir/*
#
#  Then restart the master.
#  GitLab merge requests should now show status of buildbot's builds.
#
# 5. Tell GitLab to accept authentication requests from buildbot.
#  Enter the URL of your buildbot gitlab hook, e.g.
#    http://buildhost5.oblong.com:8010/change_hook/gitlab
#  into the GitLab UI at
#    "User Settings / Applications / Add New Application",
#  with scopes 'api' and 'openid' ticked,
#  and save the appid and secret it produces:
#    echo "<longhexstring-appid>" > secrets.dir/my-gitlab-appid
#    echo "<longhexstring-appsecret>" > secrets.dir/my-gitlab-appsecret
#    chmod 600 secrets.dir/*
# 6. Restrict buildbot web UI access to logged in GitLab users.
#  Uncomment sections below marked
#    "CONFIGME: uncomment for buildbot authentication"
#  and replace <mygroup> with a valid GitLab group.
#
#  Then restart the master.
#  Buildbot's web ui should now require you to be logged in to
#  that GitLab group before it shows you much or lets you force builds.

import json
import os
import re
from anybox.buildbot.capability.dispatcher import BuilderDispatcher
from anybox.buildbot.capability.version import Version, VersionFilter
from buildbot.plugins import *
from twisted.python import log

from BBDependencies import BBDependencyGraph

def getUrlsFromLog(log):
    namedUrls = list()
    for line in log.readlines():
        if line.startswith("buildbot-url:"):
            name = line[len("buildbot-url:"):].strip().split("|")[0]
            url = line[len("buildbot-url:"):].strip().split("|")[1]
            url = "http://%s/%s" % (MASTER, url)
            namedUrls.append((name, url))

    return namedUrls


def intuit_buildtype(commitdescription):
   """Return rel or dev based on inspecting the contents of the buildbot property commit-description passed by the caller.
      Must return same value as function bs_intuit_buildtype in bs_funcs.sh.
   """
   if commitdescription == None:
       return "dev"

   if re.match('rel-[.0-9]*-[0-9]*-g', commitdescription):
       # Not tagged, so marking this as a dev build
       return "dev"

   if not re.match('rel-', commitdescription):
       # Not on a rel branch (but what about debian?), so marking this as a dev build
       return "dev"

   # would want to check which g-speak it depended on, but we don't have access to that
   # without inserting a new buildstep to probe that,
   # so caller simulates that by looking for --g-speak in options
   # FIXME: everybody involved should abort if a rel package depends on a non-rel package.

   return "rel"


class LinkedShellCommand(steps.ShellCommand):
    """A shell command that adds a URL to the build resuilts."""
    def __init__(self,**kwargs):
         steps.ShellCommand.__init__(self,**kwargs)

    def createSummary(self,log):
         rooturl = "http://%s/repobot" % MASTER
         # Upload to different location, based on whether this build was from a tag
         stability = intuit_buildtype(self.getProperty("commit-description"))
         buildername = self.getProperty("buildername")
         buildnumber = self.getProperty("buildnumber")
         artifact_url = "%s/%s/builds/%s/%d/" % (rooturl, stability, buildername, buildnumber)
         self.addURL("artifacts", artifact_url)


class LogLinkedShellCommand(steps.ShellCommand):
    """A shell command that adds URLs to the build results based on log output"""
    def __init__(self,**kwargs):
         steps.ShellCommand.__init__(self,**kwargs)

    def createSummary(self,log):
        for (name, url) in getUrlsFromLog(log):
            self.addURL(name, url)

def isMutableBuilder(buildername):
    '''
    Return True if the given builder's name indicates that its build product is mutable, i.e. is not a released package.
    '''
    return re.match('.*(master|mz|iz)-normal', buildername) and not re.match('.*(-rel-|-try-)', buildername)

def makeFactory(repourl, branch, bparams, buildername, bos):
    '''
    A Factory that just builds and tests incoming changesets.
    The branch argument is a default in case the changeset lacks one.
    bos is the operating system tag.
    '''
    f = util.BuildFactory()

    # Pre-purge harder than the git step can
    f.addStep(steps.ShellCommand(
        command="obs purge-build",
        workdir=".",
        description="purge", descriptionDone="purge", name="purge",
        flunkOnFailure=False,
        timeout=2000 ))

    f.addStep(steps.GitLab(repourl=repourl, mode='full', submodules=True, method='copy', branch=branch, getDescription=True))

    step="Save build ID"
    f.addStep(steps.ShellCommand(
        # We could skip the Interpolate now that we have unique factories per builder...
        command=util.Interpolate('pwd; which tee; echo %(prop:buildername)s/%(prop:buildnumber)s | tee bs-artifactsubdir'),
        workdir=".",
        description=step,
        descriptionDone=step,
        name=step))

    step="git describe"
    f.addStep(steps.ShellCommand(
        command='set -x; git tag -l; git describe; git describe --tags',
        description=step,
        descriptionDone=step,
        name=step))

    for step in ["clean", "uninstall_deps", "patch", "install_deps", "configure", "compile", "check", "package", "lclone", "lbuild", "compile_extra", "upload", "uninstall_deps"]:
        if step == "upload":
            shtep = LinkedShellCommand(
                command=["bau", "-v", step, bparams.split()],
                env={'BS_TRYFLAGS':util.Property('BS_TRYFLAGS', default=''), 'MASTER':MASTER},
                description=step,
                descriptionDone=step,
                name=step,
                haltOnFailure=True)
            f.addStep(shtep)
        else:
            shtep = LogLinkedShellCommand(
                # windows libchromiumcontent link is taking more than 6 hours!
                timeout=24800,
                command=["bau", "-v", step, bparams.split()],
                env={'BS_TRYFLAGS':util.Property('BS_TRYFLAGS', default=''), 'MASTER':MASTER},
                description=step,
                descriptionDone=step,
                name=step,
                haltOnFailure=True)
            f.addStep(shtep)

    # The purge step should be kept last, its only purpose is to nuke the 'build' directory
    f.addStep(steps.ShellCommand(
        command="obs purge-build",
        env={'BS_TRYFLAGS':util.Property('BS_TRYFLAGS', default=''), 'MASTER':MASTER},
        workdir=".",
        description="purge", descriptionDone="purge", name="purge",
        flunkOnFailure=False,
        timeout=2000 ))

    # If there is dependency data, and this builder is allowed to rebuild, considering triggering downstream builds.
    if bos in os2dependencyGraph and isMutableBuilder(buildername):
        # If things depend on this builder, trigger them when we're done
        log.msg("makeFactory(%s, %s, %s, %s): Checking dependencyGraph.reverse_depends" % (repourl, branch, bparams, buildername))
        dependencyGraph = os2dependencyGraph[bos]
        users = dependencyGraph.reverse_depends(buildername)
        if users != None:
            # Filter out release branch and try builds... they should not be autorebuilt
            users = [u for u in users if isMutableBuilder(u)]
        if users != None:
            log.msg("makeFactory(%s, %s, %s, %s, %s): sorted users %s" % (repourl, branch, bparams, buildername, users, bos))
            users = dependencyGraph.in_build_order_without_repeats(users)
            if users != None:
                 # Calculate the name of the TriggerableSchedulers created by addBuilders
                 triggernames = [s.replace(".", "_")+"_trigger" for s in users]
                 log.msg("makeFactory(%s, %s, %s, %s, %s): adding step to trigger %s" % (repourl, branch, bparams, buildername, bos, triggernames))
                 f.addStep(steps.Trigger(
                    schedulerNames=triggernames,
                    waitForFinish=False,
                    alwaysUseLatest=True,
                    # Show users what triggered this build
                    # (although if builds merged, only one shows)
                    set_properties={"triggered_by" : buildername}
                    )
                )

    return f


def makeBuilders(name, capfilters, repourl, branch, bparams):
    '''
    For each capfilter, return a builder using the given factory,
    named after the project and the matching capability.
    capfilters must be a list of worker labels (e.g. OS names).
    '''
    ret = []
    for x in capfilters:
        # FIXME: dispatcher creates name from template, and we can't know it in the general case!
        # What we really want is for dispatcher to call makeFactory once the builder name is known.
        # We can slide by without that because we only use boolean filters,
        # and it doesn't append anything to the name for those.
        buildername=name + '-' + x
        ret.extend(
            dispatcher.make_builders(
                # make_builders doesn't add a suffix for boolean filters, so do it here
                name=buildername,
                factory=makeFactory(repourl, branch, bparams, buildername, x),
                build_requires=[VersionFilter(x, ())]))
    return ret


def repoUrlToName(repourl):
    '''
    Gets project name from the repourl, ignoring namespace.
    '''
    # Strip off everything before project name
    # FIXME: parse this more artfully to allow projects in folders
    name = re.sub(r'^.*/', '', repourl)
    # Strip off .git suffix, if present
    return re.sub(r'\.git$', '', name)


def addBuilders(repourl, branch, flavor, capfilters, suffix, bparams):
    '''
    Add a builder for the given project and branch on the matching worker types.
    Give each a Force button.
    flavor must be 'try' or 'normal'.
    suffix, if present, is added to the name of the builder, and should name a variant implied by bparams (e.g. -as for --asan).
    capfilters must be a list of worker labels (e.g. OS names).
    '''

    factory = None
    changehook_category = None
    if flavor is "normal":
        # Respond to push events with a normal build
        changehook_category = "push"
    elif flavor is "try":
        # Respond to merge request events with a try build
        changehook_category = "merge_request"
    else:
        raise ValueError("wanted 'normal' or 'try', got '%s'" % flavor)

    name = repoUrlToName(repourl)

    if suffix != '' and not suffix.startswith('-'):
        suffix = '-' + suffix
    id = name + "-" + branch + "-" + flavor + suffix
    builders = makeBuilders(id, capfilters, repourl, branch, bparams)
    c['builders'].extend(builders)

    # Too hard to create a common scheduler or change filter for the
    # builders that can share one, so create zillions for now
    for builder in builders:
        b = builder.name
        # Avoid error "ForceScheduler name must be an identifier"
        # Note: it seems buildbot itself, somewhere in its guts, uses this same mapping, and we're stuck with it.
        bid = builder.name.replace(".", "_")
        scheduler_id = bid + "_s"
        log.msg("Appending SingleBranchScheduler %s for builder %s" % (scheduler_id, b))
        c['schedulers'].append(schedulers.SingleBranchScheduler(
          name=scheduler_id,
          change_filter=util.ChangeFilter(
              project=name, branch=branch, category=changehook_category),
          treeStableTimer=30,
          builderNames=[b]))

        force_id = bid + '_force'
        log.msg("Appending force scheduler %s for builder %s" % (force_id, b))
        c['schedulers'].append(schedulers.ForceScheduler(
            name=force_id,
            builderNames=[b]))

        # Create way for builds to trigger downstream builds
        # (Only needed on master branches)
        if re.match('.*(master|mz|iz)-normal', b):
           # Let upstream packages trigger any master builder
           triggerable_id = bid + "_trigger"
           log.msg("Appending triggerable scheduler %s for builder %s" % (triggerable_id, b))
           c['schedulers'].append(
              schedulers.Triggerable(
                 name=triggerable_id,
                 builderNames=[b]))

# For parts of buildbot that don't support Secret interpolation yet.
# Once https://github.com/buildbot/buildbot/issues/4118 is fixed,
# use util.Secret(s) instead.
def dumbSecret(s):
    with open(os.path.join(secrets_dir, s), 'r') as myfile:
        return myfile.read().replace('\n', '')


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

## GLOBAL PARAMETERS
c['collapseRequests'] = True

####### SECRETS
# Checking secrets into your master.cfg is insecure;
# best practice is to keep them elsewhere else.

# Place the secrets directory next to master.cfg:
this_dir = os.path.dirname(os.path.abspath(__file__))
secrets_dir = os.path.join(this_dir, 'secrets.dir')
c['secretsProviders'] = [secrets.SecretInAFile(dirname=secrets_dir)]
work_pw = dumbSecret('my-buildbot-work-pw')
# This isn't a secret, but it needs to be available relatively early
MASTER='buildhost5.oblong.com'

####### Declarative Configuration

# All our projects have a similar build interface, so load the list of
# projects from a simple file.
masterjson = json.load(open(os.path.join(this_dir, "master.json")))

####### WORKERS

# The 'workers' list defines the set of recognized workers.
# Each element is a Worker object, with a unique worker name and password.
# The same worker name and password must be configured on the worker.
# We use capabilities here simply to label each worker with its OS.
c['workers'] = []
for workerconfig in masterjson["slaves"]:
  wname = workerconfig["name"]
  wos = workerconfig["os"]
  props={'capability': {wos:None}}
  # Restrict to a single build at a time because our buildshims
  # typically assume they have total control of machine, and use sudo apt-get, etc. with abandon.
  w = worker.Worker(wname, work_pw, max_builds=1, properties = props)
  log.msg("Appending worker name %s" % wname)
  c['workers'].append(w)

# When using worker capabilities, must create a dispatcher:
dispatcher = BuilderDispatcher(c['workers'], capabilities={})

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least a 'port' option;
# the master will listen on that port for connections from workers.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

c['change_source'] = []

####### SCHEDULERS AND BUILDERS

# Look up what builders depend on which other builders' outputs
os2dependencyGraph = dict()
for workerconfig in masterjson["slaves"]:
  wos = workerconfig["os"]
  os2dependencyGraph[wos] = BBDependencyGraph()
  os2dependencyGraph[wos].loadDependenciesFromFiles(os.path.expanduser("~/var/repobot/bs_deps/" + wos))

# The Schedulers decide how to react to incoming changes.
c['schedulers'] = []
# The 'builders' list defines the Builders, which tell Buildbot how to
# perform a build: what steps, and which workers can execute them.
# Note that any particular build will only take place on one worker.
c['builders'] = []

# Call addBuilder for each similar project you want to build.
# It adds a builder with both normal and force schedulers.
# Note: urls must start with git@ and end with .git
#addBuilders('git@gitlab.oblong.com:platform/obs.git',
#           branch='master', flavor='normal', capfilters=['ubu1804', 'win10'], bparams='')
#addBuilders('git@gitlab.oblong.com:platform/obs.git',
#           branch='master', flavor='try',  capfilters=['ubu1804', 'win10'], bparams='')

for project in masterjson['projects']:
  #pname = project['name']
  #pcat = project['category']
  purl = project['repourl']
  for builderconf in project['builders']:
    suffix = ''
    if 'suffix' in builderconf:
      suffix = builderconf['suffix']
    params = ''
    if 'params' in builderconf:
      params = builderconf['params']
    branch = builderconf['branch']
    bos = builderconf['os']
    if 'try' in builderconf:
      flavor = 'try'
    else:
      flavor = 'normal'
    addBuilders(purl, branch, flavor, suffix=suffix, capfilters=[bos], bparams=params)

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

## CONFIGME: uncomment for gitlab status reporting
## Report build status back to GitLab UI
c['services'].append(reporters.GitLabStatusPush(
    token=util.Secret('my-gitlab-token'),
    context=util.Interpolate('%(prop:buildername)s'),
    baseURL='https://gitlab.oblong.com',
    verbose=True))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Gnu Hello GitLab"
c['titleURL'] = "https://gitlab.oblong.com/build/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://%s:8010/" % MASTER

# CONFIGME: uncomment for buildbot authentication
## This example tries to show nothing to anonymous users.
#authz = util.Authz(
#  allowRules=[
#    util.AnyEndpointMatcher(role="platform"),
#    util.AnyEndpointMatcher(role="xxend-of-listxx", defaultDeny=True),
#  ],
#  roleMatchers=[
#    util.RolesFromGroups()
#  ]
#)

# minimalistic config to activate new web UI
c['www'] = dict(
    port=8010,
    ## CONFIGME: uncomment for buildbot authentication
    #auth=util.GitLabAuth("https://gitlab.oblong.com",
    #                     dumbSecret('my-gitlab-appid'),
    #                     dumbSecret('my-gitlab-appsecret')),
    #authz=authz,
    change_hook_dialects=dict(
       gitlab={
           'secret': dumbSecret('my-webhook-token')
       },
    ),
    plugins=dict(waterfall_view={}, console_view={}, grid_view={}),
    auth=util.UserPasswordAuth([('joe', 'cool')]),
)


# Let buildbot developers know you're using gitlab support :-)
c['buildbotNetUsageData'] = 'basic'

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.
    # You can leave this at its default for all but the largest installations.
    #'db_url': "sqlite:///state.sqlite",
    # Our installation is really too large to fit comfortably in sqlite;
    # create one in mysql, then put the real URL into secrets.dir/my-db-url, e.g.
    # mysql://buildbot:mypass@localhost/mydb,
    'db_url' : dumbSecret('my-db-url')
    #'db_url' : "sqlite:///state.sqlite",
}
